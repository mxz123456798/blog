---
layout:     post
title:      "WebView基本用法"
subtitle:   "WebView基本用法"
date:       2017-09-11 00:29:00
author:     "Max"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Android
---

> “介绍webview的基本用法”


#### 加载本地html文件
在src/main目录下通过new→folder→assets创建一个asset目录,写一个html文件。我写了一个test.html
```html
<html>
<h1>
    Hello World
</h1>
</html>
```
之后在代码里通过findviewbyid找到你定义的webview控件。
```java
mWebView = (WebView) findViewById(R.id.wv);
mWebView.loadUrl("file:///android_asset/test.html");
```
loadUrl()这一方法既可以加载网址也可以加载本地html文件，加载本地assets下的文件只需要在参数里写```"file:///android_asset/文件名.html"```就可以，不过一定要注意这里是三个'/'而不是两个
![](http://upload-images.jianshu.io/upload_images/6524321-7db33600f66f2803.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
#### 加载网络地址
同样还是使用loadUrl()方法，我们尝试一下访问我的博客主页```mWebView.loadUrl("https://mxz123456798.github.io/blog/");```,记得添加```<uses-permission android:name="android.permission.INTERNET" />```这一权限。此时运行，你会发现网页并不能打开，这是因为webview是默认禁用javascript的，我们需要把这一禁用取消掉，通过```mWebView.getSettings().setJavaScriptEnabled(true);```这一方式，这样再次运行，就可以成功打开了。
![](http://upload-images.jianshu.io/upload_images/6524321-e714fbac5773c0b2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

以上我们只是实现了能够在webview内打开一个网页，当我们点击网页内的链接时，并不会在webview内打开而是会选择你手机的默认打开方式进行打开，我们需要对这一情况进行优化。
#### 将标题栏设置为所打开网页的标题
要实现这个功能，我们可以重写WebChromeClient类中的onReceivedTitle()方法
```java
    class MyWebChromeClient extends WebChromeClient {
        @Override
        public void onReceivedTitle(WebView view, String title) {
            super.onReceivedTitle(view, title);
            setTitle(title);
        }
    }
```
当接收到标题时，将标题设置为接收到的标题。
![](http://upload-images.jianshu.io/upload_images/6524321-3fe51844ceeda3d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

#### 在webview内打开链接
想要让自己的webview来处理事件而非浏览器，就要个你的webview控件设置一个WebViewClient，因此新建一个类继承WebViewClient,并在这个类里重写相应的方法。
```java
    class MyWebViewClient extends WebViewClient {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            view.loadUrl(request.getUrl().toString());
            return true;
        }
    }
```
然后给webview设置一个MyWebViewClient
```java
mWebView.setWebViewClient(new MyWebViewClient());
```
#### 加载JS代码
webview是可以执行JS代码的，同样也可以通过JS接口回调来对原生控件进行操作。
在上面的MyWebViewClient类中，重写onPageFinished()方法。
```java
        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
//            mWebView.loadUrl("javascript:alert('hello')");
            mWebView.evaluateJavascript("javascript:alert('hello')",null);
        }
```
当当前网页加载结束之后，执行一段js代码，可以调用```loadUrl("javascript:JS代码")```或者```evaluateJavascript("javascript:JS代码",null)```，后者的第二个参数是回调接口，在这里我把它设置为了null，当网页加载结束后，弹出一个hello

![](http://upload-images.jianshu.io/upload_images/6524321-e1eeed11823ca2f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
*未知错误:如果你并没有给你的webview设置一个WebChromeClient，可能会导致JS代码无法运行*
#### 在webview内实现后退
```java
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && mWebView.canGoBack()) {
            mWebView.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
```
重写onKeyDown方法,判断当按下返回键且webview能够后退时，webview执行后退。